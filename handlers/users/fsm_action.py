from aiogram import Dispatcher, types
from aiogram.types import InputFile
from aiogram.dispatcher.filters import Text

from aiogram.utils.markdown import text, bold, italic, code

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from handlers.users.api import log_bot_message, log_user_message, api_newchat_request
from aiogram import types
from aiogram.utils.emoji import emojize
from aiogram.utils.markdown import bold, code, italic, text
from loader import dp, bot
from .sentiment_classification import process_sentiment
from states.all_states import *
from keyboards.default.all_default_kb import sentiment_back_kb, empty_kb
from keyboards.inline.all_inline_kb import role_kb, sentiment_kb, rate_kb
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from keyboards.inline.all_inline_kb import role_kb
from data.config import admins
from loader import dp
from states.all_states import *

# await bot.send_audio(message.from_user.id, open("audio.mp3", "r"), performer = "Performer", title = "Title")
main_choice = ["–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º üß©", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üß¨"]
styles = ["–¥–µ–ª–æ–≤–æ–π üíº", "–æ–±—ã—á–Ω—ã–π üôå", "–º–æ–ª–æ–¥—ë–∂–Ω—ã–π üòé"]
files = {
    "–¥–µ–ª–æ–≤–æ–π üíº": {
        1: "voice/–¥–µ–ª–æ–≤–æ–π_1.ogg",
        2: "voice/–¥–µ–ª–æ–≤–æ–π_2.ogg",
        3: "voice/–¥–µ–ª–æ–≤–æ–π_3.ogg",
        4: "voice/–¥–µ–ª–æ–≤–æ–π_4.ogg"},
    "–æ–±—ã—á–Ω—ã–π üôå": {
        1: "voice/–æ–±—ã—á–Ω—ã–π_1.ogg",
        2: "voice/–æ–±—ã—á–Ω—ã–π_2.ogg",
        3: "voice/–æ–±—ã—á–Ω—ã–π_3.ogg",
        4: "voice/–æ–±—ã—á–Ω—ã–π_4.ogg"},
    "–º–æ–ª–æ–¥—ë–∂–Ω—ã–π üòé": {
        1: "voice/–º–æ–ª–æ–¥–µ–∂–Ω—ã–π_1.ogg",
        2: "voice/–º–æ–ª–æ–¥–µ–∂–Ω—ã–π_2.ogg",
        3: "voice/–º–æ–ª–æ–¥–µ–∂–Ω—ã–π_3.ogg",
        4: "voice/–º–æ–ª–æ–¥–µ–∂–Ω—ã–π_4.ogg"},
}
message_types = ["–≥–æ–ª–æ—Å–æ–≤—ã–µ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ", "—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ"]
sentiments = ["–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üëå", "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ üò°"]
sentiment_justification = {
    "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç": "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ –í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º —Ç–æ–Ω–µ.",
    "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üëå": "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ –í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ –Ω–µ–π—Ç—Ä–∞–Ω–æ–º —Ç–æ–Ω–µ.",
    "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ üò°": "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ –í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Ç–æ–Ω–µ."
}
q_nested = {
    "–≤–∫–ª–∞–¥": {
        "–£–∑–Ω–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã": {
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç": "–í–∞—à–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫–∞—Ä—Ç–µ ****–•–•–•–• —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç ZZZ —Ä—É–±–ª–µ–π –∑–∞ Y –º–µ—Å—è—Ü–µ–≤. –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã?",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üëå": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–∞—à–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫–∞—Ä—Ç–µ ****–•–•–•–• —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç ZZZ —Ä—É–±–ª–µ–π –∑–∞ Y –º–µ—Å—è—Ü–µ–≤. –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–∏—Ö.",
            "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ üò°": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–∞—à–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∫–∞—Ä—Ç–µ ****–•–•–•–• —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç ZZZ —Ä—É–±–ª–µ–π –∑–∞ Y –º–µ—Å—è—Ü–µ–≤. –ù–∞–≤–µ—Ä—è–Ω–∫–∞, —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ—ç—Ç–æ–º—É –º—ã –≤–∞—Å —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–µ–¥–µ–º –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å? –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–∏—Ö."},
        "–£–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–∫–ª–∞–¥": {
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç": "–í–∫–ª–∞–¥ –ø–æ –í–∞—à–µ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: www.pochtabank.ru/xx –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã?",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üëå": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–∫–ª–∞–¥ –ø–æ –í–∞—à–µ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: www.pochtabank.ru/xx –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–∏—Ö.",
            "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–∫–ª–∞–¥ –ø–æ –í–∞—à–µ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: www.pochtabank.ru/xx . –ù–∞–≤–µ—Ä–Ω—è–∫–∞, —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ—ç—Ç–æ–º—É –º—ã –≤–∞—Å —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–µ–¥–µ–º –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"},
        "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å": {
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?",
            "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ üò°": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?"}},
    "–∫—Ä–µ–¥–∏—Ç": {
        "–£–∑–Ω–∞—Ç—å –¥–æ–ª–≥": {
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç": "–î–æ–ª–≥ –ø–æ –í–∞—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç YYY —Ä—É–±–ª–µ–π. –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã?",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üëå": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –î–æ–ª–≥ –ø–æ –í–∞—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç YYY —Ä—É–±–ª–µ–π. –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–∏—Ö.",
            "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ üò°": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –î–æ–ª–≥ –ø–æ –í–∞—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç YYY —Ä—É–±–ª–µ–π. –ù–∞–≤–µ—Ä–Ω—è–∫–∞, —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ—ç—Ç–æ–º—É –º—ã –≤–∞—Å —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–µ–¥–µ–º –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"},
        "–£–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫—Ä–µ–¥–∏—Ç": {
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç": "–í–∞—à –∫—Ä–µ–¥–∏—Ç –ø–æ –í–∞—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: www.pochtabank.ru/xx –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? ",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üëå": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–∞—à –∫—Ä–µ–¥–∏—Ç –ø–æ –í–∞—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: www.pochtabank.ru/xx –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –µ—â–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–∏—Ö",
            "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ üò°": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–∞—à –∫—Ä–µ–¥–∏—Ç –ø–æ –í–∞—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ ****–•–•–•–• —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: www.pochtabank.ru/xx . –ù–∞–≤–µ—Ä–Ω—è–∫–∞, —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ—ç—Ç–æ–º—É –º—ã –≤–∞—Å —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–µ–¥–µ–º –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"},
        "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å": {
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòç": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üëå": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?",
            "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ üò°": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?"}},
    "–¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å": "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –í–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?"
}

yes_no = ['–¥–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –º–µ–Ω—è –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–Ω–µ –Ω—É–∂–Ω–æ, –º–æ–π –≤–æ–ø—Ä–æ—Å —Ä–µ—à—ë–Ω']


class SetSettings(StatesGroup):
    test = State()
    main_choice = State()
    age = State()
    styles = State()
    message_types = State()
    sentiments = State()
    q_category = State()
    q_question = State()
    q_answer = State()
    operator = State()


@dp.message_handler(commands=['start'], state='*')
async def main_choice_start(message: types.Message):
    log_user_message(message)
    user1 = ""
    exists = False
    with open("users.txt", "r") as user:
        use = user.readlines()
        for line in use:
            if line.strip() == str(message.from_user.id):
                exists = True
                user.close()
            else:
                user1 = str(message.from_user.id)
    if exists:
        print(f"user {message.from_user.id} already exists")
    else:
        print(f"New user - {message.from_user.id}")
        api_newchat_request(message.from_user.full_name, message.chat.id)
        with open("users.txt", "a") as file:
            file.write(user1 + "\n")
            file.close()
        for admin in admins:
            await message.bot.send_message(admin, f'New user - {message.from_user.username}')

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in main_choice:
        keyboard.add(name)
    bot_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:"
    await message.answer(bot_text, reply_markup=keyboard)
    log_bot_message(bot_text, message)
    await SetSettings.main_choice.set()


@dp.message_handler(state=SetSettings.main_choice)
async def main_choice_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    choice = message.text.lower()
    if choice not in main_choice:
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        await message.answer(bot_text)
        log_bot_message(bot_text, message)

        return
    await state.update_data(main_choice=message.text.lower())
    if choice == main_choice[1]:
        await SetSettings.test.set()
        await state.update_data(flag=False)
        await state.update_data(style='')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("/start")
        bot_text = "–í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º.\n–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        bot_text = '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞'
        await message.answer(bot_text, reply_markup=keyboard);
        log_bot_message(bot_text, message)
        return
    await SetSettings.age.set()
    bot_text = "–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
    await message.answer(bot_text, reply_markup=types.ReplyKeyboardRemove());
    log_bot_message(bot_text, message)


@dp.message_handler(state=SetSettings.test)
async def bot_echo(message: types.Message, state: FSMContext):
    log_user_message(message)

    user_data = await state.get_data()
    bot_text = '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ'
    await message.reply(bot_text, reply_markup=sentiment_kb(process_sentiment(message.text)))
    log_bot_message(bot_text, message)
    if user_data['flag']:
        #await bot.send_voice(message.chat.id, open(files[user_data['style']][4], 'rb'))
        bot_text = '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–º –æ—Ü–µ–Ω–∫—É'
        await message.reply(bot_text, reply_markup=rate_kb())
        log_bot_message(bot_text, message)

    await state.update_data(flag=False)

@dp.callback_query_handler(Text(startswith='rate'), state='*')
async def process_one_course_btn(callback_query: types.CallbackQuery):
    rate = callback_query.data[-1]
    await bot.send_message(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!",
                           chat_id=callback_query.from_user.id)
    await callback_query.answer()

@dp.message_handler(state=SetSettings.age)
async def age_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    if not message.text.isdigit():
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
        await message.answer(bot_text)
        log_bot_message(bot_text, message)

        return
    age = int(message.text)
    await state.update_data(age=age)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for size in ['–¥–∞', '–Ω–µ—Ç, –¥—Ä—É–≥–æ–π']:
        keyboard.add(size)
    await SetSettings.styles.set()
    if age <= 25:
        bot_text = '–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å "–º–æ–ª–æ–¥—ë–∂–Ω—ã–π" —Å—Ç–∏–ª—å?'
        await message.answer(bot_text, reply_markup=keyboard);
        log_bot_message(bot_text, message)
    elif age <= 35:
        bot_text = '–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å "–æ–±—ã—á–Ω—ã–π" —Å—Ç–∏–ª—å?'
        await message.answer(bot_text, reply_markup=keyboard);
        log_bot_message(bot_text, message)
    else:
        bot_text = '–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å "–¥–µ–ª–æ–≤–æ–π" —Å—Ç–∏–ª—å?'
        await message.answer(bot_text, reply_markup=keyboard);
        log_bot_message(bot_text, message)


@dp.message_handler(state=SetSettings.styles)
async def style_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    msg = message.text.lower()
    if (msg not in styles) and (msg not in ['–¥–∞', '–Ω–µ—Ç, –¥—Ä—É–≥–æ–π']):
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        return
    user_data = await state.get_data()
    age = user_data['age']
    if msg == '–Ω–µ—Ç, –¥—Ä—É–≥–æ–π':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if age <= 25:
            for size in ["–æ–±—ã—á–Ω—ã–π üôå", "–¥–µ–ª–æ–≤–æ–π üíº"]:
                keyboard.add(size)
        elif age <= 35:
            for size in ["–º–æ–ª–æ–¥—ë–∂–Ω—ã–π üòé", "–¥–µ–ª–æ–≤–æ–π üíº"]:
                keyboard.add(size)
        else:
            for size in ["–º–æ–ª–æ–¥—ë–∂–Ω—ã–π üòé", "–æ–±—ã—á–Ω—ã–π üôå"]:
                keyboard.add(size)
        bot_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å"
        await message.answer(bot_text, reply_markup=keyboard);
        log_bot_message(bot_text, message)
        return

    if msg == '–¥–∞':
        if age <= 25:
            await state.update_data(style="–º–æ–ª–æ–¥—ë–∂–Ω—ã–π üòé")
        elif age <= 35:
            await state.update_data(style="–æ–±—ã—á–Ω—ã–π üôå")
        else:
            await state.update_data(style="–¥–µ–ª–æ–≤–æ–π üíº")
    else:
        await state.update_data(style=msg)
        await SetSettings.message_types.set()

    await SetSettings.message_types.set()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for size in message_types:
        keyboard.add(size)
    bot_text = "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π"
    await message.answer(bot_text, reply_markup=keyboard);
    log_bot_message(bot_text, message)


@dp.message_handler(state=SetSettings.message_types)
async def message_types_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    if message.text.lower() not in message_types:
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        return
    await state.update_data(message_types=message.text.lower())

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for size in sentiments:
        keyboard.add(size)
    await SetSettings.sentiments.set()
    bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:"
    await message.answer(bot_text, reply_markup=keyboard);
    log_bot_message(bot_text, message)


@dp.message_handler(state=SetSettings.sentiments)
async def sentiments_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    if message.text.lower() not in sentiments:
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        return
    await state.update_data(sentiments=message.text.lower())

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for size in q_nested.keys():
        keyboard.add(size.capitalize())
    await SetSettings.q_category.set()
    user_data = await state.get_data()
    style = user_data['style']
    if user_data['message_types'] == '–≥–æ–ª–æ—Å–æ–≤—ã–µ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ':
        await state.update_data(flag=True)
        await bot.send_voice(message.chat.id, open(files[style][1], 'rb'))

    bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞:"
    await message.answer(bot_text, reply_markup=keyboard);
    log_bot_message(bot_text, message)


@dp.message_handler(state=SetSettings.q_category)
async def q_category_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    if message.text.lower() not in q_nested.keys():
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        return
    q_category = message.text.lower()
    await state.update_data(q_category=q_category)
    user_data = await state.get_data()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if q_category == "–¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å":
        sentiment = user_data['sentiments']
        bot_text = "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        # await message.answer(sentiment_justification[sentiment])
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("/start")
        await SetSettings.test.set()
        user_data = await state.get_data()
        await state.update_data(flag=False)
        style = user_data['style']
        await state.update_data(style=style)
        if user_data['message_types'] == '–≥–æ–ª–æ—Å–æ–≤—ã–µ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ':
            await state.update_data(flag=True)
            #await bot.send_voice(message.chat.id, open(files[style][1], 'rb'))
        bot_text = "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∏—Ö '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'!\n" \
                   "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ /start"
        await message.answer(bot_text, reply_markup=keyboard);
        log_bot_message(bot_text, message)
        return

    for size in q_nested[user_data['q_category']].keys():
        keyboard.add(size)
    await SetSettings.q_question.set()
    bot_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å"
    await message.answer(bot_text, reply_markup=keyboard);
    log_bot_message(bot_text, message)


@dp.message_handler(state=SetSettings.q_question)
async def q_question_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    user_data = await state.get_data()
    flag = user_data['message_types']
    q_question = message.text
    q_category = user_data['q_category']
    sentiment = user_data['sentiments']

    if q_question not in list(q_nested[q_category].keys()):
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        return
    await state.update_data(q_question=q_question)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for size in yes_no:
        keyboard.add(size)
    style = user_data['style']
    ###if user_data['message_types'] == '–≥–æ–ª–æ—Å–æ–≤—ã–µ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ':
    ###    await state.update_data(flag=True)
    ###    await bot.send_voice(message.chat.id, open(files[style][2], 'rb'))
    ###    await bot.send_voice(message.chat.id, open(files[style][3], 'rb'))
    ###    await bot.send_voice(message.chat.id, open(files[style][4], 'rb'))
    await SetSettings.q_answer.set()

    await state.update_data(flag=flag)
    bot_text = q_nested[q_category][q_question][sentiment]
    await message.answer(bot_text, reply_markup=keyboard);
    log_bot_message(bot_text, message)


@dp.message_handler(state=SetSettings.q_answer)
async def q_answer_chosen(message: types.Message, state: FSMContext):
    log_user_message(message)
    user_data = await state.get_data()
    sentiment = user_data['sentiments']
    q_category = user_data['q_category']
    q_question = user_data['q_category']
    q_answer = message.text
    if q_answer not in yes_no:
        bot_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        return

    if q_answer == yes_no[0]:
        sentiment = user_data['sentiments']
        bot_text = "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å."
        await message.answer(bot_text);
        log_bot_message(bot_text, message)
        # bot_text = sentiment_justification[sentiment]
        # await message.answer(bot_text); log_bot_message(bot_text, message)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("/start")
    await SetSettings.test.set()
    await state.update_data(flag=False)
    style = user_data['style']
    await state.update_data(style=style)
    if user_data['message_types'] == '–≥–æ–ª–æ—Å–æ–≤—ã–µ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ':
        await state.update_data(flag=True)
        await bot.send_voice(message.chat.id, open(files[style][2], 'rb'))
        await bot.send_voice(message.chat.id, open(files[style][3], 'rb'))
        await bot.send_voice(message.chat.id, open(files[style][4], 'rb'))


    bot_text = "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∏—Ö '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'!\n" \
               "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ /start"

    await message.answer(bot_text, reply_markup=keyboard);
    log_bot_message(bot_text, message)
    bot_text = '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–º –æ—Ü–µ–Ω–∫—É'
    await message.reply(bot_text, reply_markup=rate_kb())
    log_bot_message(bot_text, message)